o<-as.data.frame(as.matrix(Obama$scores))
# Make some transformation
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
# Define names
o$Emotion<- rownames(o)
# Make plot
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
options(scipen=999)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
# Define image source
img.url     = 'C:/Users/LELLA HEMANTH/Desktop/image/vir.jpg'
# Define Microsoft API URL to request data
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
# Define access key (access key is available via: https://www.microsoft.com/cognitive-services/en-us/emotion-api)
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
# Define image
mybody = list(url = img.url)
# Request data from Microsoft
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
# Show request results (if Status=200, request is okay)
faceEMO
# Reuqest results from face analysis
Obama = httr::content(faceEMO)[[1]]
Obama
# Define results in data frame
o<-as.data.frame(as.matrix(Obama$scores))
# Make some transformation
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
# Define names
o$Emotion<- rownames(o)
# Make plot
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = "C:/Users/LELLA HEMANTH/Desktop/image/vir.jpg"
options(scipen=999)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = "C:/Users/LELLA HEMANTH/Desktop/image/vir.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
img.url     = "https://i.pinimg.com/736x/1f/b7/98/1fb79884c395f23bd4816243cf148086--beard-styles-virat-kohli.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = "http://www.vrsiddhartha.ac.in/nss/slide1.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
img.url     = "http://www.vrsiddhartha.ac.in/nss/s1.png"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
options(scipen=999)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = "http://www.hindustantimes.com/rf/image_size_960x540/HT/p2/2017/01/28/Pictures/cricket-india-international-england-third-one-day_34b45e80-e556-11e6-9542-52468f740e4a.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
install.packages("Rvision")
install.packages("ROpenCVLite")
img.url     = "http://nssvrsec.site90.net/s1.png"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = "file:///C:/Users/LELLA%20HEMANTH/Desktop/image/vir.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
options(scipen=999)
img.url     = "http://nssvrsec.site90.net/gallery/0.png"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = "http://nssvrsec.site90.net/gallery/1.png"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
png(file="1.png",width = 196,height = 196,res = 1400)
x <- 1:100
y <- 1:100
plot(x, y) # Make plot
tiff("Plot1.tiff")
dev.off()
getwd()
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/mini")
data<-read.csv("customer.csv")
View(data)
attach(data)
head(data)
library(party)
output <-ctree(Churn ~ +TotalCharges +gender + Contract ,data = data )
plot(output)
output1 <-ctree(Churn ~ + gender +TotalCharges+MonthlyCharges+PaperlessBilling
+InternetService+tenure+MultipleLines+ Contract ,data = data )
plot(output1)
output2 <-ctree(Churn ~ + gender +PaperlessBilling
+InternetService+tenure+ Contract ,data = data )
plot(output2)
dev.off()
data1<-read.csv("test2.csv")
pred<-predict(output1,newdata=data1)
confusionMatrix(pred,data1$Churn)
library(caret)
pred<-predict(output1,newdata=data1)
confusionMatrix(pred,data1$Churn)
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/mini")
data<-read.csv("customer.csv")
attach(data)
head(data)
library(party)
View(data)
output <- ctree(Churn ~ +TotalCharges +gender + Contract ,data = data )
plot(output)
output1 <- ctree(Churn ~ + gender +TotalCharges+MonthlyCharges+PaperlessBilling
+InternetService+tenure+MultipleLines+ Contract ,data = data )
plot(output1)
output2 <-ctree(Churn ~ + gender +PaperlessBilling
+InternetService+tenure+ Contract ,data = data )
plot(output2)
data1<-read.csv("test2.csv")
library(caret)
pred<-predict(output1,newdata=data1)
confusionMatrix(pred,data1$Churn)
data<-read.csv("customer.csv")
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/mini")
attach(data)
plot(gender)
y<-plot(InternetService)
plot(Contract)
data1<-data[Contract=="Month-to-month",]
plot(data1$gender)
plot(data1$InternetService)
summary(data1$MonthlyCharges)
summary(data1$TotalCharges)
plot(data1$PhoneService)
summary(data1$MonthlyCharges)
summary(data1$TotalCharges)
mydata<-read.csv("cluster.csv")
mydata = na.omit(mydata) #deletion of missing
mydata = scale(mydata) #standarize variables
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
fit <- kmeans(mydata, 3) # 3 cluster solution
aggregate(mydata,by=list(fit$cluster),FUN=mean)
mydata <- data.frame(mydata, fit$cluster)
fit <- kmeans(mydata, 3) # 3 cluster solution
aggregate(mydata,by=list(fit$cluster),FUN=mean)
mydata <- data.frame(mydata, fit$cluster)
a<-fit$cluster
a
mydata$cluster<-NA
mydata$cluster<-a
mydata
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
a<-fit$cluster
mydata$cluster<-a
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/R(hemu)")
data<-read.csv("final1.csv")
attach(data)
my_table=table(productid,overall)
plot_graph1=margin.table(my_table,1)
summary(data$overall)
barplot(plot_graph1,xlab="Product id",ylab = "Frequency",main = "Overall sales")
unique(productid)
unique(overall)
my_table2=table(overall)
barplot(my_table2,main = "Over All Rating On sales",xlab="Ratings",ylab="Frequency")
pie(my_table2,radius = 1,angle = 45,density = NULL)
str(pie)
lbls=c("1 star","2 star","3 star","4 star","5 star")
library(plotrix)
pie3D(my_table2,labels=lbls,explode=0.1,main="3D view of ratings given by users")
library(ggplot2)
data1<-data[data$productid=="B0000AXRH5",]
my_table3=table(data1$productid,data1$overall)
plot_graph2=margin.table(my_table3,1)
barplot(plot_graph2,xlab="Individual product",ylab = "Frequency",main = "Sales of individual product")
nrow(data1)
summary(data1$overall)
my_table3=table(data1$overall)
barplot(my_table3,main = "Ratings Given By users to B0000AXRH5 ",xlab="Ratings",ylab="Frequency")
pie(my_table3,radius = 1,angle = 45,density = NULL)
pie3D(my_table3,labels=lbls1,explode=0.1,main="3D view ratings to individual poducts")
pie(my_table3,radius = 1,angle = 45,density = NULL)
library("tm")
library("SnowballC")
lbls1=c("1 star","3 star","4 star","5 star")
library("RColorBrewer")
library("wordcloud")
data2<-data[data$productid=="B0000AY3X0",]
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/R(hemu)")
data<-read.csv("final1.csv")
attach(data)
my_table=table(productid,overall)
plot_graph1=margin.table(my_table,1)
barplot(plot_graph1,xlab="Product id",ylab = "Frequency",main = "Overall sales")
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/R(hemu)")
data<-read.csv("final1.csv")
attach(data)
my_table=table(productid,overall)
plot_graph1=margin.table(my_table,1)
summary(data$overall)
barplot(plot_graph1,xlab="Product id",ylab = "Frequency",main = "Overall sales")
unique(productid)
my_table2=table(overall)
barplot(my_table2,main = "Over All Rating On sales",xlab="Ratings",ylab="Frequency")
lbls=c("1 star","2 star","3 star","4 star","5 star")
library(plotrix)
pie3D(my_table2,labels=lbls,explode=0.1,main="3D view of ratings given by users")
library(ggplot2)
data1<-data[data$productid=="B0000AXRH5",]
my_table3=table(data1$productid,data1$overall)
plot_graph2=margin.table(my_table3,1)
barplot(plot_graph2,xlab="Individual product",ylab = "Frequency",main = "Sales of individual product")
summary(data1$overall)
my_table3=table(data1$overall)
barplot(my_table3,main = "Ratings Given By users to B0000AXRH5 ",xlab="Ratings",ylab="Frequency")
pie3D(my_table3,labels=lbls1,explode=0.1,main="3D view ratings to individual poducts")
lbls1=c("1 star","3 star","4 star","5 star")
pie3D(my_table3,labels=lbls1,explode=0.1,main="3D view ratings to individual poducts")
library("tm")
library("SnowballC")
library("RColorBrewer")
library("wordcloud")
view<-paste(data$summary,collapse = "")
source<-VectorSource(view)
corpus<-Corpus(source)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus,removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, removeNumbers)
dtm<-DocumentTermMatrix(corpus)
dtm2<-as.matrix(dtm)
frequen<-colSums(dtm2)
frequen<-sort(frequen,decreasing = TRUE)
wor<-names(frequen)
wordcloud(wor[1:40],frequen[1:40],colors = brewer.pal(7,"Dark2"))
mydata<-read.csv("cluster.csv")
mydata = na.omit(mydata) #deletion of missing
mydata = scale(mydata) #standarize variables
output2 <-ctree(Churn ~ + gender +PaperlessBilling
+InternetService+tenure+ Contract ,data = data )
print(output)
plot(output1)
plot(output2)
plot(output)
setwd("C:/Users/LELLA HEMANTH/Desktop/mini")
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/mini")
data<-read.csv("customer.csv")
attach(data)
head(data)
library(party)
output <- ctree(Churn ~ +TotalCharges +gender + Contract ,data = data )
plot(output)
plot(output)
plot(output1)
getwd()
plot(output2)
getwd()
plot(output)
plot(output2)
plot(output1)
print(output)
dev.off()
library(caret)
pred<-predict(output1,newdata=data1)
confusionMatrix(pred,data1$Churn)
data1<-read.csv("test2.csv")
library(caret)
pred<-predict(output1,newdata=data1)
confusionMatrix(pred,data1$Churn)
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/mini")
data<-read.csv("customer.csv")
attach(data)
head(data)
library(party)
output <- ctree(Churn ~ +TotalCharges +gender + Contract ,data = data )
plot(output)
pred<-predict(output,newdata=data1)
confusionMatrix(pred,data1$Churn)
getwd()
getwd()
setwd("C:/Users/LELLA HEMANTH/Desktop/R(hemu)")
data<-read.csv("final1.csv")
attach(data)
setwd("C:/Users/LELLA HEMANTH/Desktop/mini")
mydata<-read.csv("cluster.csv")
mydata = na.omit(mydata) #deletion of missing
mydata = scale(mydata) #standarize variables
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
fit <- kmeans(mydata, 3) # 3 cluster solution
aggregate(mydata,by=list(fit$cluster),FUN=mean)
mydata <- data.frame(mydata, fit$cluster)
a<-fit$cluster
a
mydata$cluster<-NA
mydata$cluster<-a
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
my_table=table(productid,overall)
plot_graph1=margin.table(my_table,1)
summary(data$overall)
barplot(plot_graph1,xlab="Product id",ylab = "Frequency",main = "Overall sales")
unique(productid)
unique(overall)
my_table2=table(overall)
barplot(my_table2,main = "Over All Rating On sales",xlab="Ratings",ylab="Frequency")
pie(my_table2,radius = 1,angle = 45,density = NULL)
str(pie)
lbls=c("1 star","2 star","3 star","4 star","5 star")
library(plotrix)
pie3D(my_table2,labels=lbls,explode=0.1,main="3D view of ratings given by users")
library(ggplot2)
data1<-data[data$productid=="B0000AXRH5",]
my_table3=table(data1$productid,data1$overall)
plot_graph2=margin.table(my_table3,1)
barplot(plot_graph2,xlab="Individual product",ylab = "Frequency",main = "Sales of individual product")
nrow(data1)
summary(data1$overall)
my_table3=table(data1$overall)
barplot(my_table3,main = "Ratings Given By users to B0000AXRH5 ",xlab="Ratings",ylab="Frequency")
pie(my_table3,radius = 1,angle = 45,density = NULL)
lbls1=c("1 star","3 star","4 star","5 star")
pie3D(my_table3,labels=lbls1,explode=0.1,main="3D view ratings to individual poducts")
data2<-data[data$productid=="B0000AY3X0",]
view<-paste(data2$summary,collapse = "")
source<-VectorSource(view)
corpus<-Corpus(source)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus,removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, removeNumbers)
dtm<-DocumentTermMatrix(corpus)
dtm2<-as.matrix(dtm)
frequen<-colSums(dtm2)
frequen<-sort(frequen,decreasing = TRUE)
wor<-names(frequen)
wordcloud(wor[1:40],frequen[1:40],colors = brewer.pal(7,"blue"))
wordcloud(wor[1:40],frequen[1:40],colors = brewer.pal(7,"green"))
wordcloud(wor[1:40],frequen[1:40],colors = brewer.pal(7,"Green"))
wordcloud(wor[1:40],frequen[1:40],colors = brewer.pal(7,"Dark2"))
view<-paste(data$summary,collapse = "")
source<-VectorSource(view)
corpus<-Corpus(source)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus,removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, removeNumbers)
dtm<-DocumentTermMatrix(corpus)
dtm2<-as.matrix(dtm)
frequen<-colSums(dtm2)
frequen<-sort(frequen,decreasing = TRUE)
wor<-names(frequen)
wordcloud(wor[1:40],frequen[1:40],colors = brewer.pal(7,"Dark2"))
